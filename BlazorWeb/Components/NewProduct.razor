@using Microsoft.AspNetCore.Components
@using BlazorWeb.Apis
@inject IAppApi _appApi

<Modal Title="Create Product" Visible="@Visible" Closable="false" Footer="null">
  <p>@_errorMessage</p>
  <Form @ref="_form" Model="@Model" ValidateMode="@FormValidateMode.Default" ValidateOnChange="@true"
        LabelColSpan="8" WrapperColSpan="16">
    <FormItem>
      <LabelTemplate>
        <label class="ant-form-item-required" for="name">Name</label>
      </LabelTemplate>
      <ChildContent>
        <Input id="name" @bind-Value="@context.Name" placeholder="product name"/>
      </ChildContent>
    </FormItem>

    <FormItem Label="Category">
            <Select DataSource="@_categoryModels"
                    @bind-Value="@context.CategoryId"
                    LabelName="@nameof(CategoryModel.Name)"
                    ValueName="@nameof(CategoryModel.Id)"
                    Placeholder="Select a category"
                    AllowClear>
            </Select>
        </FormItem>

    <FormItem WrapperColOffset="8" WrapperColSpan="16">
      <Button Type="@ButtonType.Primary" OnClick="Save">
        Save
      </Button>
      <Button Type="@ButtonType.Default" OnClick="Cancel">
        Cancel
      </Button>
    </FormItem>
  </Form>
</Modal>

@code {
  [Parameter]
  public bool Visible { get; set; }

  [Parameter]
  public CreateProductModel Model { get; set; }

  [Parameter]
  public Func<CreateProductModel, Task<ResultDto<ProductDto>>>? OnSave { get; set; }

  [Parameter]
  public EventCallback<(bool, ProductDto?)> OnClose { get; set; }

  List<CategoryModel> _categoryModels = null!;
  private Form<CreateProductModel> _form = null!;
  private string _errorMessage = null!;

  protected override async Task OnInitializedAsync()
  {
    _categoryModels = new List<CategoryModel>();
    var (listResponseModel, isError, errorMessage) = await _appApi.GetCategoriesAsync();
    if (!isError)
    {
      _categoryModels = listResponseModel.Select(x => new CategoryModel
      {
        Id = x.Id,
        Name = x.Name
      }).ToList();
    }
  }

  private async Task Save()
  {
    if (_form.Validate())
    {
      var (result, isError, errorMessage) = await OnSave?.Invoke(_form.Model)!;
      if (!isError)
      {
        Visible = false;
        await OnClose.InvokeAsync((Visible, result));
      }
      else
      {
        _errorMessage = errorMessage;
      }
    }
  }

  private async Task Cancel()
  {
    Visible = false;
    await OnClose.InvokeAsync((Visible, null));
  }

  public class CategoryModel
  {
    public Guid Id { get; set; }
    public string Name { get; init; } = null!;
  }
}
