// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using N8T.Core.Domain;
using Shipping.Domain;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Shipping
{
    internal partial class ShippingOrderEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Shipping.Domain.ShippingOrder",
                typeof(ShippingOrder),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(EntityBase).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EntityBase).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation("Relational:ColumnName", "id");
            id.AddAnnotation("Relational:ColumnType", "uuid");
            id.AddAnnotation("Relational:DefaultValueSql", "uuid_generate_v4()");

            var created = runtimeEntityType.AddProperty(
                "Created",
                typeof(DateTime),
                propertyInfo: typeof(EntityBase).GetProperty("Created", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EntityBase).GetField("<Created>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd);
            created.AddAnnotation("Relational:ColumnName", "created");
            created.AddAnnotation("Relational:DefaultValueSql", "now()");

            var freight = runtimeEntityType.AddProperty(
                "Freight",
                typeof(float?),
                propertyInfo: typeof(ShippingOrder).GetProperty("Freight", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<Freight>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            freight.AddAnnotation("Relational:ColumnName", "freight");

            var shipAddress = runtimeEntityType.AddProperty(
                "ShipAddress",
                typeof(string),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipAddress.AddAnnotation("Relational:ColumnName", "ship_address");

            var shipCity = runtimeEntityType.AddProperty(
                "ShipCity",
                typeof(string),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipCity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipCity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipCity.AddAnnotation("Relational:ColumnName", "ship_city");

            var shipCountry = runtimeEntityType.AddProperty(
                "ShipCountry",
                typeof(string),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipCountry", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipCountry>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipCountry.AddAnnotation("Relational:ColumnName", "ship_country");

            var shipName = runtimeEntityType.AddProperty(
                "ShipName",
                typeof(string),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipName.AddAnnotation("Relational:ColumnName", "ship_name");

            var shipPostalCode = runtimeEntityType.AddProperty(
                "ShipPostalCode",
                typeof(string),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipPostalCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipPostalCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipPostalCode.AddAnnotation("Relational:ColumnName", "ship_postal_code");

            var shipRegion = runtimeEntityType.AddProperty(
                "ShipRegion",
                typeof(string),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipRegion", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipRegion>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipRegion.AddAnnotation("Relational:ColumnName", "ship_region");

            var shippedDate = runtimeEntityType.AddProperty(
                "ShippedDate",
                typeof(DateTime?),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShippedDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShippedDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shippedDate.AddAnnotation("Relational:ColumnName", "shipped_date");

            var shipperInfoId = runtimeEntityType.AddProperty(
                "ShipperInfoId",
                typeof(Guid?),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipperInfoId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipperInfoId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            shipperInfoId.AddAnnotation("Relational:ColumnName", "shipper_info_id");

            var updated = runtimeEntityType.AddProperty(
                "Updated",
                typeof(DateTime?),
                propertyInfo: typeof(EntityBase).GetProperty("Updated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EntityBase).GetField("<Updated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            updated.AddAnnotation("Relational:ColumnName", "updated");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "pk_shipping_orders");

            var index = runtimeEntityType.AddIndex(
                new[] { id },
                unique: true);
            index.AddAnnotation("Relational:Name", "ix_shipping_orders_id");

            var index0 = runtimeEntityType.AddIndex(
                new[] { shipperInfoId });
            index0.AddAnnotation("Relational:Name", "ix_shipping_orders_shipper_info_id");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ShipperInfoId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id")! })!,
                principalEntityType);

            var shipperInfo = declaringEntityType.AddNavigation("ShipperInfo",
                runtimeForeignKey,
                onDependent: true,
                typeof(ShipperInfo),
                propertyInfo: typeof(ShippingOrder).GetProperty("ShipperInfo", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ShippingOrder).GetField("<ShipperInfo>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "fk_shipping_orders_shipper_info_shipper_info_temp_id");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "shipping");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "shipping_orders");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
